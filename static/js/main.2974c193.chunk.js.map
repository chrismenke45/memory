{"version":3,"sources":["components/Cards.js","components/ScoreDisplay.js","components/NewGame.js","functions/shuffleArray.js","functions/heroFetch.js","functions/randomIdArrayGen.js","functions/randomHeroId.js","components/GetNewHeros.js","App.js","index.js"],"names":["Cards","props","heros","loadScreen","onChoice","cardMount","useEffect","className","map","hero","style","backgroundImage","url","id","onClick","heroName","ScoreDisplay","score","highScore","NewGame","startGame","marginTop","shuffleArray","array","i","length","j","Math","floor","random","t","apiKey","idNum","a","fetch","response","json","name","image","clicked","heroFetch","randomIdArrayGen","arrayLength","idMax","randomHeroId","idArray","includes","GetNewHeros","onContinue","App","useState","setHeros","setLoadScreen","setScore","setHighScore","game","setGame","allHerosClicked","setAllHerosClicked","e","filter","target","toString","intermediateHeros","heroIdArray","Promise","all","process","then","arr","catch","error","alert","console","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LAwCeA,EApCD,SAACC,GACX,IAAQC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,WAAYC,EAAwBH,EAAxBG,SAAUC,EAAcJ,EAAdI,UAMrC,OAJAC,qBAAU,WACND,MACD,IAGC,sBAAKE,UAAU,WAAf,gBAEKJ,EAqBD,6CApBA,sBAAKI,UAAU,UAAf,cAOKL,EAAMM,KAAI,SAACC,GACR,OAAO,qBACHC,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAKG,IAAd,sEACxBL,UAAU,iBAEVM,GAAIJ,EAAKI,GACTC,QAASV,EALN,SAOFK,EAAKM,UAJDN,EAAKI,cCdnBG,EAVM,SAACf,GAClB,IAAQgB,EAAqBhB,EAArBgB,MAAOC,EAAcjB,EAAdiB,UACf,OACI,sBAAKX,UAAU,aAAf,UACI,0CAAaU,KACb,8CAAiBC,SCOdC,EAZC,SAAClB,GACb,IAAQmB,EAAcnB,EAAdmB,UACR,OACI,qBAAKb,UAAU,WAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,oBAAIG,MAAO,CAACW,UAAW,OAAvB,iCACA,wBAAQP,QAASM,EAAjB,4BCECE,EAVI,SAACC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAIP,EAAMC,GACdD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,G,mECPX,WAAyBQ,EAAQC,GAAjC,iBAAAC,EAAA,sEAC2BC,MAAM,wCAAD,OAAyCH,EAAzC,YAAmDC,IADnF,cACUG,EADV,gBAEuBA,EAASC,OAFhC,cAEU3B,EAFV,yBAGW,CACLI,GAAIJ,EAAKI,GACTE,SAAUN,EAAK4B,KACfzB,IAAKH,EAAK6B,MAAM1B,IAChB2B,SAAS,IAPf,4C,sBAUiBC,M,8CCCAC,EAXQ,SAACC,EAAaC,EAAOC,GAE1C,IADA,IAAIC,EAAU,GACLrB,EAAI,EAAGA,GAAKkB,EAAc,EAAGlB,IAAK,CACzC,IAAIX,OAAE,EACN,GACEA,EAAK+B,EAAaD,SACXE,EAAQC,SAASjC,IAC1BgC,EAAQrB,GAAKX,EAEf,OAAOgC,GCNMD,EAHI,SAACD,GAClB,OAAOhB,KAAKC,MAAMD,KAAKE,SAAWc,GAAS,GCahCI,EAZK,SAAC9C,GACjB,IAAQ+C,EAAe/C,EAAf+C,WACR,OACI,qBAAKzC,UAAU,WAAf,SACI,sBAAKA,UAAU,gBAAf,UACI,sDACA,wBAAQO,QAASkC,EAAjB,4BC6FDC,MA1Ff,WACE,MAA0BC,mBAAS,CAAC,CAClCrC,GAAI,EACJE,SAAU,SACVH,IAAK,GACL2B,SAAS,KAJX,mBAAOrC,EAAP,KAAciD,EAAd,KAMA,EAAoCD,oBAAS,GAA7C,mBAAO/C,EAAP,KAAmBiD,EAAnB,KACA,EAA0BF,mBAAS,GAAnC,mBAAOjC,EAAP,KAAcoC,EAAd,KACA,EAAkCH,mBAAS,GAA3C,mBAAOhC,EAAP,KAAkBoC,EAAlB,KACA,EAAwBJ,oBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAA8CN,oBAAS,GAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KA2DA,OACE,sBAAKnD,UAAU,WAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,mBAAGA,UAAU,eAAb,6CACA,cAAC,EAAD,CAAcU,MAAOA,EAAOC,UAAWA,IAGrCqC,EACGE,EAGC,cAAC,EAAD,CAAaT,WAhBJ,WACjBU,GAAmB,GACnBN,GAAc,MAYN,cAAC,EAAD,CAAOlD,MAAOA,EAAOC,WAAYA,EAAYC,SAjDtC,SAACuD,GAEhB,IAAkC,IADbzD,EAAM0D,QAAO,SAAAnD,GAAI,OAAIA,EAAKI,KAAO8C,EAAEE,OAAOhD,GAAGiD,cAC/C,GAAGvB,QACpBc,EAAS,GACTD,GAAc,GACdI,GAAQ,OACH,CACL,IAAIO,EAAoB7D,EAAMM,KAAI,SAAAC,GAYhC,OAVIkD,EAAEE,OAAOhD,GAAGiD,aAAerD,EAAKI,GAC3B,2BACFJ,GADE,IAEL8B,SAAS,IAGJ,eACF9B,MAKT0C,EAAS7B,EAAayC,IACtBV,EAASpC,EAAQ,GACbA,EAAQ,GAAKC,GACfoC,EAAarC,EAAQ,IAElBA,EAAQ,GAAMf,EAAMuB,QAAW,GAClCiC,GAAmB,KAsBkDrD,UAhEzD,WAChB,IAAI2D,EAAcvB,EAAiB,GAHzB,IAGoCG,GAC9CqB,QAAQC,IAAIF,EAAYxD,KAAI,SAAAK,GAC1B,OAAO2B,EApBG2B,kBAoBgBtD,OAEzBuD,MAAK,SAAAC,GACJlB,EAASkB,GACTjB,GAAc,MAEfkB,OAAM,SAAAC,GACLC,MAAM,6DACNC,QAAQF,MAAMA,EAAMG,eAyDlB,cAAC,EAAD,CAAStD,UAtBC,WAChBoC,GAAQ,GACRJ,GAAc,UClElBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2974c193.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n//import getHero from './getHero';\n//const API_KEY = process.env.REACT_APP_API_KEY;\n\nconst Cards = (props) => {\n    const { heros, loadScreen, onChoice, cardMount } = props;\n\n    useEffect(() => {\n        cardMount();//on mount pull data from api to make hero cards \n    }, []);\n\n    return (\n        <div className=\"interact\">{/*div that fits in grid with respect to title, score, instructions*/}\n         {/*make if then statement that either displays cards or loaign if cards arent loaded*/}   { \n            !loadScreen ? \n            <div className=\"cardBox\"> {/*div that make grid inside it to hold all cards*/}\n\n            {/* Next: map through hero arry and make div for each car\n            then: use image from api or set as failed to load\n            then: set it so onclick either improves score or looses game\n            then: put hero name in the card\n            or make loading screen*/}\n                {heros.map((hero) => {\n                    return <div\n                        style={{ backgroundImage: `url(${hero.url}), url(\"https://via.placeholder.com/300x300?text=Failed To Load\")`}} \n                        className=\"individualCard\"\n                        key={hero.id}\n                        id={hero.id}\n                        onClick={onChoice}\n                    >\n                        {hero.heroName}\n                    </div>\n                })}\n            </div>\n            :\n            <div>Loading...</div>\n            }\n        </div>\n    )\n}\nexport default Cards;","import React from 'react'\n//this displayes the score in the top right corner\nconst ScoreDisplay = (props) => {\n    const { score, highScore } = props;\n    return (\n        <div className=\"scoresArea\">\n            <div>Score: {score}</div>\n            <div>Highscore: {highScore}</div>\n        </div>\n    )\n}\n\nexport default ScoreDisplay;\n","import React from 'react'\n//this puts a screen that will allow the hero api to make a fresh call after the game is lost\nconst NewGame = (props) => {\n    const { startGame } = props;\n    return (\n        <div className=\"interact\">\n            <div className=\"restartButton\">\n                <h1 style={{marginTop: '0px'}}>You Lost! Try Again</h1>\n                <button onClick={startGame}>New Game</button>\n            </div>\n        </div>\n    )\n}\n\nexport default NewGame;","const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {//for each spot in aaray\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      let t = array[i];//set placeholder with i's value\n      array[i] = array[j];//change i's value to random value\n      array[j] = t;//change random value to i's initial value\n    }\n    return array;\n  }\n\n  export default shuffleArray;","async function heroFetch(apiKey, idNum) {//async function to get hero data from api\n    const response = await fetch(`https://www.superheroapi.com/api.php/${apiKey}/${idNum}`);\n    const hero = await response.json();\n    return {\n      id: hero.id,//set object to api call values\n      heroName: hero.name,\n      url: hero.image.url,\n      clicked: false\n    }\n  }\n  export default heroFetch;","const randomIdArrayGen = (arrayLength, idMax, randomHeroId) => {//make array with random hero numbers\n    let idArray = []//initialize empty array\n    for (let i = 0; i <= arrayLength - 1; i++) {\n      let id;\n      do {\n        id = randomHeroId(idMax)//set to random number\n      } while (idArray.includes(id))//if number is aleady included in array, get random number again until no longer a number already included\n      idArray[i] = id;//set id to random number just generated\n    }\n    return idArray;\n  }\n  export default randomIdArrayGen;","const randomHeroId = (idMax) => {//select random hero id\n    return Math.floor(Math.random() * idMax) + 1//select random number between 1 and idMax\n  }\n  export default randomHeroId;","import React from 'react'\n//similar to NewGame, it allows for the heros to be reloaded after all have been cleared\nconst GetNewHeros = (props) => {\n    const { onContinue } = props;\n    return (\n        <div className=\"interact\">\n            <div className=\"restartButton\">\n                <h1>You got all of them!</h1>\n                <button onClick={onContinue}>Continue</button>\n            </div>\n        </div>\n    )\n}\n\nexport default GetNewHeros;","import React, { useState } from 'react'\nimport Cards from './components/Cards'\nimport ScoreDisplay from './components/ScoreDisplay';\nimport NewGame from './components/NewGame';\nimport shuffleArray from './functions/shuffleArray';\nimport heroFetch from './functions/heroFetch';\nimport randomIdArrayGen from './functions/randomIdArrayGen';\nimport randomHeroId from './functions/randomHeroId';\nimport GetNewHeros from './components/GetNewHeros';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nfunction App() {\n  const [heros, setHeros] = useState([{//initialize a heros array as a state\n    id: 1,\n    heroName: 'Yeehaw',\n    url: '',\n    clicked: false,\n  }])\n  const [loadScreen, setLoadScreen] = useState(true)//set loadscreen to true so it shows loading on open\n  const [score, setScore] = useState(0)//set score to zero\n  const [highScore, setHighScore] = useState(0)//set highscore to zero\n  const [game, setGame] = useState(true)//set game, a variable that allows you to play to true\n  const [allHerosClicked, setAllHerosClicked] = useState(false)//this will turn true when all visible heros have been clicked, it will prompt new api call\n\n  let idMax = 270;//maximum id number for heros from the api\n\n  const cardMount = () => {//this will run in cards.js when it is mounted\n    let heroIdArray = randomIdArrayGen(16, idMax, randomHeroId);//make an array with 16 random id numbers\n    Promise.all(heroIdArray.map(id => {//make a promise for all api calls\n      return heroFetch(API_KEY, id)//get hero for each id in heroIdArray\n    }))\n      .then(arr => {//set heros state to the new array with api info\n        setHeros(arr)\n        setLoadScreen(false)//make it so cards are displayed, and it no longer says loading\n      })\n      .catch(error => {//alert user of error and tell them to reload page to fix the issue\n        alert('There was a problem loading heros, please reload the page')\n        console.error(error.message)\n      })\n  }\n\n  const onChoice = (e) => {//when a hero card is clicked this will happen\n    let checkIfClicked = heros.filter(hero => hero.id === e.target.id.toString())//check if the card has already been clicked\n    if (checkIfClicked[0].clicked === true) {//if its already been clicked then score resets, and the loss game screen is shown\n      setScore(0);\n      setLoadScreen(true)\n      setGame(false)\n    } else {//if they made an good choice\n      let intermediateHeros = heros.map(hero => {//map through array\n        let newHero//initialize variable\n        if (e.target.id.toString() === hero.id) {//if id is the same as the one that was just clciked, update it so it is marked as clicked\n          newHero = {\n            ...hero,\n            clicked: true,\n          }\n        } else {//else leave it the same\n          newHero = {\n            ...hero\n          }\n        }\n        return newHero//return new object\n      })\n      setHeros(shuffleArray(intermediateHeros))//set heros array to the updated array but shuffle it first so they will be in new order\n      setScore(score + 1);//set score\n      if (score + 1 >= highScore) {//set high score if applicable\n        setHighScore(score + 1);\n      }\n      if ((score + 1) % (heros.length) == 0) { //if all heros have been clicked, then make it so api must be called again\n        setAllHerosClicked(true)\n      }\n    }\n  }\n  const startGame = () => {//will be clicked in newgame to set loadscreen and make it so new api call is made\n    setGame(true)\n    setLoadScreen(true)\n  }\n  const onContinue = () => {//will be clicked in GetNewHeros to set loadscreen and make it so new api call is made\n    setAllHerosClicked(false)\n    setLoadScreen(true)\n  }\n\n  return (\n    <div className=\"allSpace\">\n      <h1 className=\"title\">Test Your Memory</h1>\n      <p className=\"instructions\">Don't pick the same hero twice!</p>\n      <ScoreDisplay score={score} highScore={highScore} />\n      {/*make if then statements to decide if loss screen is shown, loading/api with cards is shown (this are both in Cards), or if the GetNewHeros is shown to continue game once all have been clicked */}\n      {\n        game ?\n          !allHerosClicked ?\n            <Cards heros={heros} loadScreen={loadScreen} onChoice={onChoice} cardMount={cardMount} />\n            :\n            <GetNewHeros onContinue={onContinue} />\n          :\n          <NewGame startGame={startGame} />\n      }\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n//const API_KEY = process.env.REACT_APP_API_KEY;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}